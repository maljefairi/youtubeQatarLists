# YouTube Channel Video Scraper and Downloader

This project consists of two main scripts:
1. A YouTube channel video scraper that fetches video information and generates transcripts.
2. A video downloader that processes the scraped information and downloads the videos.

## Setup

1. Clone this repository to your local machine.

2. Create a virtual environment and activate it:
   ```
   python -m venv .venv
   source .venv/bin/activate  # On Windows, use `.venv\Scripts\activate`
   ```

3. Install the required dependencies:
   ```
   pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib google.generativeai python-dotenv yt-dlp
   ```

4. Set up your `.env` file with the following variables:
   ```
   YOUTUBE_API_KEY=your_youtube_api_key_here
   GEMINI_API_KEY=your_gemini_api_key_here
   GEMINI_MODEL=gemini-1.5-flash
   CHANNEL_FILE=youtubeChannels.txt
   DATA_FILE=channel_data.csv
   OUTPUT_FILE=output.csv
   OUTPUT_DIRECTORY=./output
   DOWNLOAD_DIRECTORY=./downloaded_videos
   TRANSCRIPT_LANGUAGE=ar-AR
   MAX_VIDEOS_PER_CHANNEL=50
   LOG_LEVEL=INFO
   ```

5. Create a `prompt.txt` file with the prompt template for generating transcripts and summaries.

6. Create a `youtubeChannels.txt` file with a list of YouTube channel names, one per line.

## Usage

### 1. YouTube Channel Video Scraper

Run the scraper script:

```
python youtubeScrabber.py
```

This script will:
- Fetch video information for each channel in `youtubeChannels.txt`
- Generate transcripts and summaries for new videos
- Save the results in CSV files in the `OUTPUT_DIRECTORY`

### 2. Video Downloader

After running the scraper, run the downloader script:

```
python integrated_youtube_downloader.py
```

This script will:
- Read the CSV files generated by the scraper
- Download videos for each channel
- Organize downloads into channel-specific folders within `DOWNLOAD_DIRECTORY`

## Important Notes

- Respect YouTube's terms of service and copyright laws when using these scripts.
- Be aware of API quotas and rate limits. Adjust the `MAX_VIDEOS_PER_CHANNEL` and add delays if necessary.
- The Gemini AI model is used for generating transcripts and summaries. Ensure you have the necessary permissions and credits.
- Large-scale downloading may lead to your IP being rate-limited or blocked by YouTube. Use responsibly.

## Troubleshooting

- If you encounter API errors, check your API keys and quotas in the Google Cloud Console.
- For Gemini AI issues, verify your API key and model availability.
- If downloads fail consistently, try reducing the number of threads or adding longer delays between retries.

## Customization

- Modify the `prompt.txt` file to change how transcripts and summaries are generated.
- Adjust the `ydl_opts` in the downloader script to change video download options (e.g., format, quality).

## License

This project is for educational purposes only. Ensure you have the right to use and download content before using these scripts.